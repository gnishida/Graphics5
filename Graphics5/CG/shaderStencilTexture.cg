/**
 * This shader implements Stencil Texture mapping.
 */

struct VertexInput {
	float4 position : POSITION;
	float4 color	: COLOR;
	float2 texCoord	: TEXCOORD0;
};

struct VertexOutput {
	float4 position : POSITION;
	float2 texCoord	: TEXCOORD0;
	float4 objectPos: TEXCOORD1;
	float4 color	: COLOR;
};

struct FragmentInput {
	float2 texCoord	: TEXCOORD0;
	float4 position : TEXCOORD1;
	float4 color	: COLOR;
};

/*struct FragmentOutput {
	float4 color	: COLOR;
	float depth		: DEPTH;
};*/


VertexOutput VertexMain(
				VertexInput vi,
				uniform float4x4 modelViewProj) {
	VertexOutput vo;

	vo.position = mul(modelViewProj, vi.position);
	vo.texCoord = vi.texCoord;
	vo.objectPos = vi.position;
	vo.color = vi.color;

	return vo;
}

void FragmentMain(
				FragmentInput fi,
				out float4 color : COLOR,
				out float depth : DEPTH,
				uniform float useTex,
				uniform sampler2D tex : TEX0) {
	//FragmentOutput fo;

	if (useTex == 1.0f) {
		float4 c = tex2D(tex, fi.texCoord);

		if (c.r == 0 && c.g == 0 && c.b == 0) {
			color = fi.color;
		} else {
			color.a = 0;
			depth = 1.0f;
		}
	} else {
		color = fi.color;
	}

	//return fo;
}

