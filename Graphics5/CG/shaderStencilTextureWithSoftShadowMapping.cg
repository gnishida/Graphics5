/**
 * This shader implements shadow mapping.
 */

struct VertexInput {
	float4 position : POSITION;
	float4 color	: COLOR;
	float3 normal	: NORMAL;
	float2 texCoord	: TEXCOORD0;
};

struct VertexOutput {
	float4 position : POSITION;
	float2 texCoord	: TEXCOORD0;
	float4 objectPos: TEXCOORD1;
	float3 normal	: TEXCOORD2;
	float4 color	: COLOR;
};

struct FragmentInput {
	float2 texCoord	: TEXCOORD0;
	float4 position : TEXCOORD1;
	float3 normal	: TEXCOORD2;
	float4 color	: COLOR;
};


float4 PhongShading(
				in float3 position,
				in float4 origColor,
				in float3 normal,
				in float3 light,
				in float3 eye,
				in float Ka,
				in float Kd,
				in float Ks,
				in float brightness) {
	if (dot(normal, eye - position) < 0) {
		normal = normal * -1;
	}

	// light direction
	float3 L = normalize(light - position);

	float ambient = Ka;
	float diffuse = max(dot(L, normal), 0) * brightness;

	float3 V = normalize(eye - position);
	float specular = pow(max(dot(normal * dot(V, normal) * 2 - V, L), 0), Ks) * brightness;
	
	float4 color;
	color.rgb = origColor.rgb * (ambient + diffuse + specular);
	color.a = 1;

	return color;
}

bool IsIntersectWithTriangle(
				in float3 position,
				in float3 dir,
				in float3 v0,
				in float3 v1,
				in float3 v2,
				in float3 n,
				out float s,
				out float t) {
	// test 1 (r should be between 0 and 1)
	float denom = dot(n, dir);
	if (denom == 0.0f) return false;

	float numer = dot(n, v0 - position);
	float r = numer / denom;

	if (r <= 0.000001f || r >= 0.999999f) return false;
	
	// test 2 (s, t, and s+t should be between 0 and 1)
	float3 p = dir * r + position;
	//float3 w = p - v0;
	//float3 u = v1 - v0;
	//float3 v = v2 - v0;

	//float uu = dot(v1 - v0, v1 - v0);
	//float vv = dot(v2 - v0, v2 - v0);
	//float uv = dot(v1 - v0, v2 - v0);
	float wu = dot(p - v0, v1 - v0);
	float wv = dot(p - v0, v2 - v0);

	//denom = - uu * vv;
	//denom = -160000;
	//s = wu * 0.0025;
	//t = wv * 0.0025;
	//if (s <= 0.000001f || t <= 0.000001f || s + t >= 0.999999f) return false;
	//if (s <= 0.000001f || t <= 0.000001f || s >= 0.999999f || t >= 0.999999f) return false;
	if (wu <= 0.0004f || wv <= 0.0004f || wu >= 399.9996f || wv >= 399.9996f) return false;

	return true;
}

VertexOutput VertexMain(
				VertexInput vi,
				uniform float4x4 modelViewProj) {
	VertexOutput vo;

	vo.position = mul(modelViewProj, vi.position);
	vo.texCoord = vi.texCoord;
	vo.objectPos = vi.position;
	vo.color = vi.color;
	vo.normal = vi.normal;

	return vo;
}

void FragmentMain(
				FragmentInput fi,
				out float4 color : COLOR,
				out float depth : DEPTH,
				uniform float meshTris[18 * 3],
				uniform float3 meshVerts[24 * 3],
				uniform float3 meshNorms[24 * 3],
				uniform float2 meshTexCoords[24 * 3],
				uniform float3 lightCenter,
				uniform float lightStep,
				uniform float numLight,
				uniform float3 eyePosition,
				uniform float Ka,
				uniform float Kd,
				uniform float Ks,
				uniform float useTex,
				uniform sampler2D tex : TEX0,
				uniform float4x4 modelViewProj) {
	float3 lightOrig = lightCenter;
	lightOrig.x -= numLight * 0.5f * lightStep;
	lightOrig.y -= numLight * 0.5f * lightStep;

	// Compute the visibility to the light sources
	float count = 0.0f;
	for (int v = 0; v < numLight; v++) {
		for (int u = 0; u < numLight; u++) {
			float3 light = lightOrig;
			light.x += u * lightStep;
			light.y += v * lightStep;

			// Check the intersection with each triangle
			int intersected = 0;
			for (int i = 0; i < 6 * 3; i++) {
				int tris0 = (int)meshTris[i * 3];
				int tris1 = (int)meshTris[i * 3 + 1];
				int tris2 = (int)meshTris[i * 3 + 2];
				float3 v0 = meshVerts[tris0];
				float3 v1 = meshVerts[tris1];
				float3 v2 = meshVerts[tris2];
				float3 n = meshNorms[tris0];

				float s, t;
				if (!IsIntersectWithTriangle(fi.position.xyz, light - fi.position.xyz, v0, v1, v2, n, s, t)) continue;

				// lookup the texture to see if the color is black or white
				float2 texCoord0 = meshTexCoords[tris0];
				float2 texCoord1 = meshTexCoords[tris1];
				float2 texCoord2 = meshTexCoords[tris2];
				float2 texCoord = texCoord0 * (1 - s - t) + texCoord1 * s + texCoord2 * t;
				float4 c = tex2D(tex, texCoord);
				if (c.r >= 0.5f) continue;

				// intersect!!!
				intersected = 1;
				break;
			}

			if (intersected == 0) {
				count++;
			}
		}
	}

	// define the color according to Phong shading
	color = PhongShading(fi.position.xyz, fi.color, fi.normal, lightOrig, eyePosition, Ka, Kd, Ks, count / numLight / numLight);

	float4 proj = mul(modelViewProj, fi.position);

	// Stencil texture
	if (useTex == 1.0f) {
		float4 c = tex2D(tex, fi.texCoord);

		if (c.r >= 0.5f) {
			color.a = 0;
			depth = 1.0f;
		} else {
			depth = proj.z * 0.005;
		}
	} else {
		depth = proj.z * 0.005;
	}
}

			